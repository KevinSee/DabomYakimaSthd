model {

# Priors for detection probabilities 

	 ICH_D_p <- 0; # no detections / not in operation
	 ICH_U_p <- 0; # no detections / not in operation
	 JD1_D_p <- 0; # no detections / not in operation
	 JD1_U_p <- 1; # Single array, no upstream detections
	 JDA_p <- 1; # Single array, no upstream detections
	 MCN_p <- 0; # no detections / not in operation
	 PRA_D_p <- 0; # no detections / not in operation
	 PRA_U_p <- 0; # no detections / not in operation
	 SAT_D_p <- 1; # Single array, no upstream detections
	 SAT_U_p <- 0; # no detections / not in operation
	 SUN_D_p ~ dbeta(1, 1);
	 SUN_U_p ~ dbeta(1, 1);
	 AH1_D_p ~ dbeta(1, 1);
	 AH1_U_p ~ dbeta(1, 1);
	 LNR_p <- 0; # no detections / not in operation
	 LWC_D_p <- 0; # no detections / not in operation
	 LWC_U_p <- 0; # no detections / not in operation
	 ROZ_p ~ dbeta(1, 1);
	 LMC_D_p <- 0; # no detections / not in operation
	 LMC_U_p <- 0; # no detections / not in operation
	 UMC_D_p <- 0; # no detections / not in operation
	 UMC_U_p <- 0; # no detections / not in operation
	 LMT_D_p <- 0; # no detections / not in operation
	 LMT_U_p <- 0; # no detections / not in operation
	 SWK_D_p ~ dbeta(1, 1);
	 SWK_U_p ~ dbeta(1, 1);
	 TAN_D_p ~ dbeta(1, 1);
	 TAN_U_p ~ dbeta(1, 1);
	 TOP_D_p ~ dbeta(1, 1);
	 TOP_U_p ~ dbeta(1, 1);
	 SM1_D_p <- 0; # no detections / not in operation
	 SM1_U_p <- 0; # no detections / not in operation
	 TP2_D_p ~ dbeta(1, 1);
	 TP2_U_p ~ dbeta(1, 1);

# Priors for transition probabilities 

	 psi_PRO[1, 1:n_branch_PRO] ~ ddirch(PRO_dirch_vec[1,]); 
	 psi_PRO[2, 1:n_branch_PRO] ~ ddirch(PRO_dirch_vec[2,]); 

	 omega_PRO[1, 1:n_branch_PRO] <- zero_vec[1:(n_branch_PRO)]; 
	 omega_PRO[1, (n_branch_PRO + 1)] <- 1; 

	 omega_PRO[2, 1:n_branch_PRO] <- psi_PRO[1,]; 
	 omega_PRO[2, (n_branch_PRO + 1)] <- 0; 

	 omega_PRO[3, 1:n_branch_PRO] <- psi_PRO[2,]; 
	 omega_PRO[3, (n_branch_PRO + 1)] <- 0; 

	 psi_SUN[1, 1:n_branch_SUN] ~ ddirch(SUN_dirch_vec[1,]); 
	 psi_SUN[2, 1:n_branch_SUN] ~ ddirch(SUN_dirch_vec[2,]); 

	 omega_SUN[1, 1:n_branch_SUN] <- zero_vec[1:(n_branch_SUN)]; 
	 omega_SUN[1, (n_branch_SUN + 1)] <- 1; 

	 omega_SUN[2, 1:n_branch_SUN] <- psi_SUN[1,]; 
	 omega_SUN[2, (n_branch_SUN + 1)] <- 0; 

	 omega_SUN[3, 1:n_branch_SUN] <- psi_SUN[2,]; 
	 omega_SUN[3, (n_branch_SUN + 1)] <- 0; 

	 psi_ROZ[1, 1:n_branch_ROZ] ~ ddirch(ROZ_dirch_vec[1,]); 
	 psi_ROZ[2, 1:n_branch_ROZ] ~ ddirch(ROZ_dirch_vec[2,]); 

	 omega_ROZ[1, 1:n_branch_ROZ] <- zero_vec[1:(n_branch_ROZ)]; 
	 omega_ROZ[1, (n_branch_ROZ + 1)] <- 1; 

	 omega_ROZ[2, 1:n_branch_ROZ] <- psi_ROZ[1,]; 
	 omega_ROZ[2, (n_branch_ROZ + 1)] <- 0; 

	 omega_ROZ[3, 1:n_branch_ROZ] <- psi_ROZ[2,]; 
	 omega_ROZ[3, (n_branch_ROZ + 1)] <- 0; 

	 psi_TOP[1, 1:n_branch_TOP] ~ ddirch(TOP_dirch_vec[1,]); 
	 psi_TOP[2, 1:n_branch_TOP] ~ ddirch(TOP_dirch_vec[2,]); 

	 omega_TOP[1, 1:n_branch_TOP] <- zero_vec[1:(n_branch_TOP)]; 
	 omega_TOP[1, (n_branch_TOP + 1)] <- 1; 

	 omega_TOP[2, 1:n_branch_TOP] <- psi_TOP[1,]; 
	 omega_TOP[2, (n_branch_TOP + 1)] <- 0; 

	 omega_TOP[3, 1:n_branch_TOP] <- psi_TOP[2,]; 
	 omega_TOP[3, (n_branch_TOP + 1)] <- 0; 

	 phi_LMC[1] <- 0 # no upstream detections
	 phi_LMC[2] <- 0 # no upstream detections

# Where is each fish? 

	 for(i in 1:n_fish) { 


		 a_PRO[i] ~ dcat( omega_PRO[fish_type[i] + 1, 1:(n_branch_PRO+1)] ) 
			 for (j in 1:n_branch_PRO)	{ 
				 eta_PRO[i,j] <- equals(a_PRO[i],j) # equals(x,y) is a test for equality, returns [1,0] 
			 }

		 a_SUN[i] ~ dcat( omega_SUN[(eta_PRO[i,7] * fish_type[i] + 1), 1:(n_branch_SUN+1)] ) 
			 for (j in 1:n_branch_SUN)	{ 
				 eta_SUN[i,j] <- equals(a_SUN[i],j) # equals(x,y) is a test for equality, returns [1,0] 
			 }

		 a_ROZ[i] ~ dcat( omega_ROZ[(eta_SUN[i,4] * fish_type[i] + 1), 1:(n_branch_ROZ+1)] ) 
			 for (j in 1:n_branch_ROZ)	{ 
				 eta_ROZ[i,j] <- equals(a_ROZ[i],j) # equals(x,y) is a test for equality, returns [1,0] 
			 }

		 a_TOP[i] ~ dcat( omega_TOP[(eta_PRO[i,8] * fish_type[i] + 1), 1:(n_branch_TOP+1)] ) 
			 for (j in 1:n_branch_TOP)	{ 
				 eta_TOP[i,j] <- equals(a_TOP[i],j) # equals(x,y) is a test for equality, returns [1,0] 
			 }

		 eta_LMC[i] ~ dbern(eta_ROZ[i, 1] * phi_LMC[fish_type[i]]) 

	} # end the n_fish loop 


# Were tags observed? 

	 for (i in 1:n_fish) {

		 cap_hist[i,2] ~ dbern( ICH_D_p * eta_PRO[i,1] );

		 cap_hist[i,3] ~ dbern( ICH_U_p * eta_PRO[i,1] );

		 cap_hist[i,4] ~ dbern( JD1_D_p * eta_PRO[i,2] );

		 cap_hist[i,5] ~ dbern( JD1_U_p * eta_PRO[i,2] );

		 cap_hist[i,6] ~ dbern( JDA_p * eta_PRO[i,3] );

		 cap_hist[i,7] ~ dbern( MCN_p * eta_PRO[i,4] );

		 cap_hist[i,8] ~ dbern( PRA_D_p * eta_PRO[i,5] );

		 cap_hist[i,9] ~ dbern( PRA_U_p * eta_PRO[i,5] );

		 cap_hist[i,10] ~ dbern( SAT_D_p * eta_PRO[i,6] );

		 cap_hist[i,11] ~ dbern( SAT_U_p * eta_PRO[i,6] );

		 cap_hist[i,12] ~ dbern( SUN_D_p * eta_PRO[i,7] );

		 cap_hist[i,13] ~ dbern( SUN_U_p * eta_PRO[i,7] );

		 cap_hist[i,14] ~ dbern( AH1_D_p * eta_SUN[i,1] );

		 cap_hist[i,15] ~ dbern( AH1_U_p * eta_SUN[i,1] );

		 cap_hist[i,16] ~ dbern( LNR_p * eta_SUN[i,2] );

		 cap_hist[i,17] ~ dbern( LWC_D_p * eta_SUN[i,3] );

		 cap_hist[i,18] ~ dbern( LWC_U_p * eta_SUN[i,3] );

		 cap_hist[i,19] ~ dbern( ROZ_p * eta_SUN[i,4] );

		 cap_hist[i,20] ~ dbern( LMC_D_p * eta_ROZ[i,1] );

		 cap_hist[i,21] ~ dbern( LMC_U_p * eta_ROZ[i,1] );

		 cap_hist[i,22] ~ dbern( UMC_D_p * eta_LMC[i] );

		 cap_hist[i,23] ~ dbern( UMC_U_p * eta_LMC[i] );

		 cap_hist[i,24] ~ dbern( LMT_D_p * eta_ROZ[i,2] );

		 cap_hist[i,25] ~ dbern( LMT_U_p * eta_ROZ[i,2] );

		 cap_hist[i,26] ~ dbern( SWK_D_p * eta_ROZ[i,3] );

		 cap_hist[i,27] ~ dbern( SWK_U_p * eta_ROZ[i,3] );

		 cap_hist[i,28] ~ dbern( TAN_D_p * eta_ROZ[i,4] );

		 cap_hist[i,29] ~ dbern( TAN_U_p * eta_ROZ[i,4] );

		 cap_hist[i,30] ~ dbern( TOP_D_p * eta_PRO[i,8] );

		 cap_hist[i,31] ~ dbern( TOP_U_p * eta_PRO[i,8] );

		 cap_hist[i,32] ~ dbern( SM1_D_p * eta_TOP[i,1] );

		 cap_hist[i,33] ~ dbern( SM1_U_p * eta_TOP[i,1] );

		 cap_hist[i,34] ~ dbern( TP2_D_p * eta_TOP[i,2] );

		 cap_hist[i,35] ~ dbern( TP2_U_p * eta_TOP[i,2] );

	}  # end the n_fish loop 
}
